{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","image","ingredients","cuisineType","dishType","useState","toggle","setToggle","className","src","alt","onClick","prev","map","ing","text","App","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","fetchedData","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPA+BeA,EA3BA,SAAC,GAAiE,IAAhEC,EAA+D,EAA/DA,MAAOC,EAAwD,EAAxDA,SAAUC,EAA8C,EAA9CA,MAAMC,EAAwC,EAAxCA,YAAYC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAE9D,EAA0BC,mBAAS,QAAnC,mBAAOC,EAAP,KAAeC,EAAf,KASC,OACI,sBAAKC,UAAU,OAAf,UACI,6BAAKT,IACL,0CAAaI,KACb,4BAAIC,IACJ,qBAAKI,UAAU,KAAKC,IAAKR,EAAOS,IAAI,KACpC,kDAAqBV,KACrB,wBAAQQ,UAAU,OAAOG,QAVlB,WACXJ,GAAU,SAACK,GAAD,OAAUA,MAShB,0BACA,oBAAKJ,UAAWF,EAAS,gBAAiB,gBAA1C,SACKJ,EAAYW,KAAI,SAAAC,GAAG,OACnB,6BAAKA,EAAIC,gBC2CXC,EA9DH,WAEV,IAUD,EAA8BX,mBAAS,IAAvC,mBAAOY,EAAP,KAAgBC,EAAhB,KACA,EAA4Bb,mBAAS,IAArC,mBAAOc,EAAP,KAAeC,EAAf,KACA,EAAwBf,mBAAS,YAAjC,mBAAOgB,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACTC,MACC,CAACH,IAEH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACIC,MAAM,mCAAD,OAAoCL,EAApC,mBAnBd,WAmBc,oBAlBb,qCAiBI,cACXM,EADW,gBAEQA,EAASC,OAFjB,OAEXC,EAFW,OAGjBX,EAAWW,EAAYC,MACvBC,QAAQC,IAAIH,GAJK,2CAAH,qDAgBf,OACE,sBAAKrB,UAAU,MAAf,UACE,gDAAkB,cAAC,IAAD,OAClB,uBAAMyB,SARK,SAACC,GACdA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKkBZ,UAAU,cAApC,UACG,uBAAOA,UAAU,aAAa4B,KAAK,OAAOC,MAAOlB,EAAQmB,SAb/C,SAACJ,GACdd,EAAUc,EAAEK,OAAOF,QAYgEG,YAAY,8CAC5F,yBAAQhC,UAAU,MAAM4B,KAAK,SAA7B,cAAuC,cAAC,IAAD,UAGzCnB,EAAQJ,KAAI,SAAA4B,GAAM,OACjB,cAAC,EAAD,CAGCvC,YAAauC,EAAOA,OAAOvC,YAC3BH,MAAO0C,EAAOA,OAAOC,MACrB1C,SAAUyC,EAAOA,OAAOzC,SACxBC,MAAOwC,EAAOA,OAAOxC,MACrBE,YAAasC,EAAOA,OAAOtC,YAC3BC,SAAUqC,EAAOA,OAAOrC,UANnBqC,EAAOA,OAAOC,cCzCbC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d7c29e68.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\n\r\n\r\nconst Recipe = ({title, calories, image,ingredients,cuisineType, dishType} ) => {\r\n\r\n   const [toggle, setToggle]=useState('true')\r\n    \r\n    const disprecipe =(e)=>{\r\n        \r\n    }\r\n\r\n    const toggler =()=>{\r\n        setToggle((prev)=> !prev);\r\n    }\r\n    return (\r\n        <div className='main'>\r\n            <h1>{title}</h1>\r\n            <p> Origin: {cuisineType}</p>\r\n            <p>{dishType}</p>\r\n            <img className='im' src={image} alt=''/>\r\n            <p> Total Calories: {calories}</p>\r\n            <button className='btn1' onClick={toggler}> ingredients</button>\r\n            <ul  className={toggle ? 'recipe-hidden' :'recipe-active' }> \r\n                {ingredients.map(ing=>\r\n                 <li>{ing.text}</li>)}   \r\n            </ul>        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe\r\n","import './App.css';\nimport React, {useState, useEffect} from 'react'\nimport { FaSearch } from \"react-icons/fa\"\nimport { GiCook } from \"react-icons/gi\";\nimport Recipe from './Recipe'\n\nconst App = () => {\n\n  const APP_ID='13cd3ea1';\n  const APP_KEY='902c018df8d20bc11553734bd7d6308e';\n\n //[] useeffect runs once, when the first time the app runs\n // [component] every other time the component re-renderes\n // nothing-it runs everytime anything re-renderes                                 \n // useEffect(()=>{\n //   console.log('effect deployed');\n //}, [])\n\n const [recipes, setRecipes] = useState([]);\n const [search, setSearch] = useState('');\n const [query, setQuery]=useState('biriyani');\n\n useEffect(()=>{\n  getRecipes();\n },[query])\n\n const getRecipes = async()=>{\n   const response=await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n   const fetchedData= await response.json();\n   setRecipes(fetchedData.hits);\n   console.log(fetchedData);\n }\n\n  const makesearch=(e)=>{\n      setSearch(e.target.value);\n  }\n\n  const onSearch=(e)=>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n  return (\n    <div className='App' >\n      <h> !tans recipe!!<GiCook/></h>\n      <form onSubmit={onSearch} className='search-form'>\n         <input className='search-bar' type='text' value={search} onChange={makesearch}  placeholder='Whaddya Wanna Eat Or Drink? Type In naaa!'/>\n         <button className='btn' type='submit'> <FaSearch/></button> \n      \n      </form>\n      {recipes.map(recipe=>(\n        <Recipe \n         \n         key={recipe.recipe.label}\n         ingredients={recipe.recipe.ingredients}\n         title={recipe.recipe.label}\n         calories={recipe.recipe.calories}\n         image={recipe.recipe.image}\n         cuisineType={recipe.recipe.cuisineType}\n         dishType={recipe.recipe.dishType} \n\n         />\n         \n      ))}\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}